#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: grayshall-0910
#=================================================

name: Lean-x64

on: 
#  release:
#    types: [published]
    
#  push:
#    branches: 
#      - master
      
#  schedule:
#    - cron: 0 8 * * 5
  
  watch:
    types: [started]
env:
  RUN_VALIDATION: true

jobs:
  build:
    runs-on: ubuntu-latest

    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [lean-x64] #lean-x64,lean-ipq40xx,lean-mt7621,lean-rockchip,lienol-x64


    steps:
    - name: 检查
      uses: actions/checkout@master

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex node-uglify git gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: 克隆源代码
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
        
    - name: 更新 & 安装 feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds install -a
    - name: 自定义安装源
      working-directory: ./openwrt
      run: |
        git clone https://github.com/xiaorouji/openwrt-passwall package/openwrt-passwall
        git clone https://github.com/kenzok8/litte package/litte     
    - name: 自定义配置文件Lean
      env:
        CONFIG_FILE: 'Lean.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x ./customize.sh && ./customize.sh
        cd openwrt && rm -rf package/litte/naiveproxy
        cp -f package/litte/default-settings package/lean/default-settings/files/zzz-default-settings
        cp -f package/litte/banner package/base-files/files/etc/banner
        cp -f package/litte/4.19Makefile target/linux/x86/Makefile
        cp -f package/litte/Leandiffconfig .config && make defconfig
        git pull && ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: 下载包文件
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: 编译固件
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        make -j$(nproc) V=s
    
    - name: 包目录文件打包
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/packages/
        tar -cvf  ${{matrix.target}}_packages.tar ./
        gzip ${{matrix.target}}_packages.tar
        mv *.tar.gz ..
        
    - name: 内核目录文件打包
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/
        tar -cvf  ${{matrix.target}}_targets.tar ./
        gzip ${{matrix.target}}_targets.tar
        mv *.tar.gz ..
        
    - name: 固件组合
      run: |
          rm -rf ./Firmware/
          mkdir -p ./Firmware/
          find openwrt/bin/targets/ -name "*bin*" | xargs -i cp {} ./Firmware/
          find openwrt/bin/targets/ -name "*img*" | xargs -i cp -f {} ./Firmware/
    
    - name: 上传包目录文件
      if: env.UPLOAD_PACKAGES_DIR == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled()　&& steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
           name: OpenWrt_packages_${{matrix.target}}
           path: openwrt/bin/packages
        
    - name: 上传内核文件
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
          name: OpenWrt_targets_${{matrix.target}}
          path: openwrt/bin/targets
        
    - name: 固件上传
      if: env.UPLOAD_FIRMWARE == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
         name: OpenWrt_firmware_${{matrix.target}}
         path: ./Firmware/
   
    - name: 固件上传至release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

#    - name : 上传固件与目录
#      uses: actions/upload-artifact@master
#      with:
#        name: Lean_openwrt
#        path: openwrt/bin
