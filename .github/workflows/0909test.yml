#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: grayshall
#=================================================

name: grays-0909Openwrt-AutoBuild

on: 
# release:
#   types: [published]

#  push:
#  branches: 
#     - master

# schedule:
#  - cron: 0 8 * * 5
  
  watch:
    types: [started]
env:
  RUN_VALIDATION: true

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    
    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [lean-x64] #lean-x64,lean-ipq40xx,lean-mt7621,lean-rockchip,lienol-x64
 
    steps:
    - name: Checkout
      uses: actions/checkout@master
     
    - name: 日期设置
      run: |
         date=$(date +%Y-%m-%d)
         echo "DATE=$date" >> $GITHUB_ENV

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex node-uglify git gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Load Settings.ini
      run: |    
        source "${GITHUB_WORKSPACE}/user/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "UPLOAD_PACKAGES_DIR=${UPLOAD_PACKAGES_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_TARGETS_DIR=${UPLOAD_TARGETS_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_TO_ARTIFACTS=${UPLOAD_TO_ARTIFACTS}" >> $GITHUB_ENV
        echo "UPLOAD_TO_REALEASE=${UPLOAD_TO_REALEASE}" >> $GITHUB_ENV
        
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
    
    - name: custom feeds
      run: |
          cd openwrt
           git clone https://github.com/Lienol/openwrt-package.git package/lienol
          git clone https://github.com/fw876/helloworld.git package/hellworld
          git clone https://github.com/kenzok8/openwrt-packages.git package/kenzok
           git clone https://github.com/xiaorouji/openwrt-passwall.git package/passwall

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        

    - name: Configuration Customization - Build_${{matrix.target}}
      run: |
         cd openwrt && mv ../user/${{matrix.target}}/config.diff .config && cd ..        
         echo "Apply files..."
          if [ -n "$(ls -A "user/common/files" 2>/dev/null)" ]; then
         cp -r -f user/common/files/* openwrt/package/base-files/files/
         fi
         if [ -n "$(ls -A "user/${{matrix.target}}/files" 2>/dev/null)" ]; then
         cp -r -f user/${{matrix.target}}/files/* openwrt/package/base-files/files/
         fi

          echo "Apply user/common/custom.sh"
         if [ -f "user/common/custom.sh" ]; then
         (
           cd openwrt
           /bin/bash "../user/common/custom.sh"
         )
         fi       
         if [ -f "user/${{matrix.target}}/custom.sh" ]; then
         (
           cd openwrt
           /bin/bash "../user/${{matrix.target}}/custom.sh"
         )
         fi

    - name: Download package
      working-directory: ./openwrt
      run: |
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        make -j$(nproc) V=s
        find ./bin  ! -name '*ac2100*' -name *initramfs*  -exec rm -f {} \;
        echo "::set-output name=status::success"

    - name: Pack packages_dir
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/packages/
        tar -cvf  ${{matrix.target}}_packages.tar ./
        gzip ${{matrix.target}}_packages.tar
        mv *.tar.gz ..
        
    - name: Pack targets_dir
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/
        tar -cvf  ${{matrix.target}}_targets.tar ./
        gzip ${{matrix.target}}_targets.tar
        mv *.tar.gz ..
        
    - name: Assemble Firmware
      run: |
          rm -rf ./Firmware/
          mkdir -p ./Firmware/
          find openwrt/bin/targets/ -name "*bin*" | xargs -i cp {} ./Firmware/
          find openwrt/bin/targets/ -name "*img*" | xargs -i cp -f {} ./Firmware/
      
    - name: Upload packages directory
      if: env.UPLOAD_PACKAGES_DIR == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled()　&& steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
           name: OpenWrt_packages_${{matrix.target}}
           path: openwrt/bin/packages
        
    - name: Upload targets directory
      if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
          name: OpenWrt_targets_${{matrix.target}}
          path: openwrt/bin/targets
        
    - name: Upload Firmware
      if: env.UPLOAD_FIRMWARE == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
         name: OpenWrt_firmware_${{matrix.target}}
         path: ./Firmware/       
